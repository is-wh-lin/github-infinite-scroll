name: Deploy to GitHub Pages

on:
  # Automatic deployment on push to main branch
  push:
    branches: [main]

  # Manual deployment trigger
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: false
        default: 'main'
        type: string
      environment:
        description: 'Deployment environment'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development
      deploy_message:
        description: 'Custom deployment message'
        required: false
        default: 'Manual deployment'
        type: string
      force_deploy:
        description: 'Force deployment (overwrite existing)'
        required: false
        default: false
        type: boolean
      skip_build_cache:
        description: 'Skip build cache for fresh build'
        required: false
        default: false
        type: boolean

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write
  actions: read
  statuses: write
  deployments: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: 'pages'
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || 'main' }}
          # Fetch full history for proper git operations
          fetch-depth: 0

      - name: Display deployment information
        run: |
          echo "üöÄ Deployment Information"
          echo "Branch: ${{ github.event.inputs.branch || 'main' }}"
          echo "Environment: ${{ github.event.inputs.environment || 'production' }}"
          echo "Message: ${{ github.event.inputs.deploy_message || 'Automatic deployment' }}"
          echo "Force Deploy: ${{ github.event.inputs.force_deploy || 'false' }}"
          echo "Skip Cache: ${{ github.event.inputs.skip_build_cache || 'false' }}"
          echo "Triggered by: ${{ github.event_name }}"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ${{ github.event.inputs.skip_build_cache == 'true' && '' || 'npm' }}

      - name: Install dependencies
        run: |
          echo "üì¶ Installing dependencies..."
          npm ci
          echo "‚úÖ Dependencies installed successfully"
        continue-on-error: false

      - name: Validate build environment
        run: |
          echo "üîç Validating build environment..."
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Working directory: $(pwd)"
          echo "Available scripts:"
          npm run --silent 2>/dev/null || echo "No scripts available"
          echo "‚úÖ Environment validation complete"

      - name: Build with Nuxt
        run: |
          echo "üèóÔ∏è Starting optimized Nuxt build process..."
          echo "Environment: ${{ github.event.inputs.environment || 'production' }}"
          echo "Base URL: ${{ vars.NUXT_APP_BASE_URL || '/github-infinite-scroll' }}"

          # Run the optimized production build with error handling
          if npm run generate:production; then
            echo "‚úÖ Build completed successfully"
            echo "üìÅ Build output directory contents:"
            ls -la .output/public/ || echo "Output directory not found"
            
            # Display build size information
            echo "üìä Build size analysis:"
            du -sh .output/public/* 2>/dev/null || echo "No files to analyze"
            
            # Count generated files
            echo "üìÑ Generated files:"
            find .output/public -type f | wc -l | xargs echo "Total files:"
            find .output/public -name "*.js" | wc -l | xargs echo "JavaScript files:"
            find .output/public -name "*.css" | wc -l | xargs echo "CSS files:"
            find .output/public -name "*.html" | wc -l | xargs echo "HTML files:"
          else
            echo "‚ùå Build failed"
            echo "::error title=Build Failed::Nuxt build process failed. Check the logs above for details."
            exit 1
          fi
        env:
          # Environment configuration based on input
          NODE_ENV: ${{ github.event.inputs.environment == 'development' && 'development' || 'production' }}

          # GitHub API configuration for deployment
          GITHUB_API_BASE_URL: ${{ vars.API_BASE_URL || 'https://api.github.com' }}

          # GitHub token for API access (higher rate limits)
          # Set this in repository secrets if you want authenticated API access
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN || secrets.PERSONAL_ACCESS_TOKEN }}

          # GitHub Pages deployment configuration
          NUXT_APP_BASE_URL: ${{ vars.NUXT_APP_BASE_URL || '/github-infinite-scroll' }}

          # API rate limiting configuration
          GITHUB_API_RATE_LIMIT: ${{ vars.API_RATE_LIMIT || '5000' }}
          ENABLE_RATE_LIMIT_HANDLING: ${{ vars.ENABLE_RATE_LIMIT_HANDLING || 'true' }}

          # Environment-specific settings
          DEPLOYMENT_ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
          DEPLOYMENT_BRANCH: ${{ github.event.inputs.branch || 'main' }}

      - name: Validate build output
        run: |
          echo "üîç Validating build output..."
          if [ ! -d ".output/public" ]; then
            echo "‚ùå Build output directory not found"
            echo "::error title=Build Output Missing::Expected .output/public directory not found"
            exit 1
          fi

          if [ ! "$(ls -A .output/public)" ]; then
            echo "‚ùå Build output directory is empty"
            echo "::error title=Empty Build Output::Build output directory exists but is empty"
            exit 1
          fi

          echo "üìÅ Build output contents:"
          find .output/public -type f -name "*.html" -o -name "*.js" -o -name "*.css" | head -10
          echo "‚úÖ Build output validation passed"

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./.output/public
          publish_branch: gh-pages
          force_orphan: true
          commit_message: "Deploy to GitHub Pages - ${{ github.event.inputs.deploy_message || github.event.head_commit.message || 'Automatic deployment' }}"
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'

  # Verify deployment job
  verify:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Wait for deployment
        run: |
          echo "‚è≥ Waiting for deployment to complete..."
          sleep 30

      - name: Verify deployment
        run: |
          echo "üîç Verifying deployment..."

          # Check if gh-pages branch was updated
          LATEST_COMMIT=$(git ls-remote origin gh-pages | cut -f1)
          if [ -n "$LATEST_COMMIT" ]; then
            echo "‚úÖ gh-pages branch updated successfully"
            echo "Latest commit: $LATEST_COMMIT"
            
            # Get commit details
            git fetch origin gh-pages:gh-pages 2>/dev/null || true
            if git show-ref --verify --quiet refs/heads/gh-pages; then
              echo "üìù Latest commit message:"
              git log --oneline -1 gh-pages 2>/dev/null || echo "Could not retrieve commit message"
            fi
          else
            echo "‚ùå Failed to verify gh-pages branch update"
            echo "::warning title=Deployment Verification::Could not verify gh-pages branch update"
          fi

          echo "üåê Deployment should be available at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"

      - name: Deployment Summary
        run: |
          echo "‚úÖ Deployment completed successfully!"
          echo ""
          echo "üìã Deployment Details:"
          echo "‚Ä¢ Branch: ${{ github.event.inputs.branch || 'main' }}"
          echo "‚Ä¢ Environment: ${{ github.event.inputs.environment || 'production' }}"
          echo "‚Ä¢ Commit: ${{ github.sha }}"
          echo "‚Ä¢ Trigger: ${{ github.event_name }}"
          echo ""
          echo "üåê Site URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          echo ""
          echo "üìù Custom Message: ${{ github.event.inputs.deploy_message || 'Automatic deployment' }}"
          echo ""
          echo "::notice title=Deployment Success::Application successfully deployed to GitHub Pages"

      - name: Create deployment status comment
        if: github.event_name == 'push'
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            try {
              const deploymentUrl = 'https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}';
              const workflowUrl = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';

              // Create a commit status
              await github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.sha,
                state: 'success',
                target_url: deploymentUrl,
                description: 'Successfully deployed to GitHub Pages',
                context: 'deployment/github-pages'
              });
              
              console.log('‚úÖ Commit status created successfully');
            } catch (error) {
              console.log('‚ö†Ô∏è Could not create commit status:', error.message);
              console.log('This is not critical for deployment success');
            }

      - name: Update deployment environment
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            try {
              const deploymentUrl = 'https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}';

              // Only create deployment status if we have a deployment ID
              if (context.payload.deployment?.id) {
                await github.rest.repos.createDeploymentStatus({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  deployment_id: context.payload.deployment.id,
                  state: 'success',
                  target_url: deploymentUrl,
                  description: 'Deployment completed successfully',
                  environment: '${{ github.event.inputs.environment || 'production' }}'
                });
                console.log('‚úÖ Deployment status updated successfully');
              } else {
                console.log('‚ÑπÔ∏è No deployment ID available, skipping deployment status update');
              }
            } catch (error) {
              console.log('‚ö†Ô∏è Could not update deployment status:', error.message);
              console.log('This is not critical for deployment success');
            }

  # Handle deployment failures
  handle-failure:
    runs-on: ubuntu-latest
    needs: [build, verify]
    if: failure()
    steps:
      - name: Deployment failure notification
        run: |
          echo "‚ùå Deployment failed!"
          echo ""
          echo "üìã Failure Details:"
          echo "‚Ä¢ Branch: ${{ github.event.inputs.branch || 'main' }}"
          echo "‚Ä¢ Environment: ${{ github.event.inputs.environment || 'production' }}"
          echo "‚Ä¢ Commit: ${{ github.sha }}"
          echo "‚Ä¢ Trigger: ${{ github.event_name }}"
          echo "‚Ä¢ Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo ""
          echo "::error title=Deployment Failed::GitHub Pages deployment failed. Check the workflow logs for details."

      - name: Create failure status
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            try {
              const workflowUrl = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';

              // Create a commit status for failure
              await github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.sha,
                state: 'failure',
                target_url: workflowUrl,
                description: 'Deployment to GitHub Pages failed',
                context: 'deployment/github-pages'
              });
              
              console.log('‚úÖ Failure status created successfully');
            } catch (error) {
              console.log('‚ö†Ô∏è Could not create failure status:', error.message);
              console.log('This is not critical for failure handling');
            }

      - name: Log troubleshooting information
        run: |
          echo "üîß Troubleshooting Information:"
          echo ""
          echo "Common deployment failure causes:"
          echo "1. Build errors - Check the 'Build with Nuxt' step logs"
          echo "2. Missing dependencies - Verify package.json and package-lock.json"
          echo "3. Environment variables - Check repository secrets and variables"
          echo "4. GitHub Pages settings - Verify Pages is enabled in repository settings"
          echo "5. Permissions - Ensure workflow has proper GitHub Pages permissions"
          echo ""
          echo "üìö Helpful resources:"
          echo "‚Ä¢ GitHub Pages documentation: https://docs.github.com/en/pages"
          echo "‚Ä¢ Nuxt deployment guide: https://nuxt.com/docs/getting-started/deployment"
          echo "‚Ä¢ Repository settings: ${{ github.server_url }}/${{ github.repository }}/settings/pages"
